
inserting object to collection:
-------------------------------
const user = await User.create({   // use create
  name: "John Doe",
  email: "john@example.com",
});

find in mongoose:
-----------------
    let result = await User.find({}).toArray(); // No need to use toArray when you are working with mongoose.

    let result = await Users.find({}); // this syntax is fine. works perfectly 

    const existingUser = await Users.findOne({ email: "vishnu@gmail.com", password : "password@123" });

    const id = "6406ca2ef93e1f55fc954348";
    const findUserById = await Users.findById(id);

find object and update:
------------------------
1. using findByIdAndUpdate
    const id = "6406ca2ef93e1f55fc954348";
    const data = await Users.findById(id);
    data.email = "sabbu123@backflipt.com";

    const findUserById = await Users.findByIdAndUpdate(id, data);
    console.log(findUserById);

2. using findOneAndUpdate (use this)

  returns the deleted document
    app.post('/user/:id', async (req, res) => {
      try {
        const userId = req.params.id;
        const updateData = req.body;
        const updatedUser = await User.findOneAndUpdate(
          { _id: userId },         // Filter
          { $set: updateData },     // Update data
          { new: true }             // Options: returns updated document
        );

        if (!updatedUser) {
          return res.status(404).json({ message: 'User not found' });
        }

        res.json(updatedUser);
      } catch (error) {
        res.status(500).json({ message: error.message });
      }
    });

    what is the use of new: true ?
    --------------------------------
    Without { new: true }
      findOneAndUpdate returns the document as it was before the update.
    With { new: true }
      findOneAndUpdate returns the updated data

3. Using updateOne and updateMany for Partial Updates

  If you only need to update specific fields, updateOne and updateMany are great for this.
  These methods do not return the updated document by default, only a summary of the modification.
    await User.updateOne({ _id: userId }, { $set: { email: "newemail@example.com" } });
    await User.updateMany({ isActive: true }, { $set: { isActive: false } });

find and delete:
----------------
1. findOneAndDelete

  const result = Users.findOneAndDelete({ email: "vishnureddy8980@gmail.com" });
  if(!result) {
    res.status(400).send((message: "usernotfound"));
  }
  res.status(200).send((message: "deletion successful"));

2. deleteOne and deleteMany

  If you want to delete a document but don't need the deleted document's details, deleteOne and deleteMany are simpler alternatives to findOneAndDelete.
    await User.deleteOne({ email: "vishnureddy8980@gmail.com" });
    await User.deleteMany({ isActive: false });

3. findByIdAndDelete
  const id = "6406ca2ef93e1f55fc954348"; // Example document ID
  const deletedUser = await User.findByIdAndDelete(id);
  if (deletedUser) {
    console.log("User deleted successfully:", deletedUser);
  } else {
    console.log("User not found");
  }


advantages of using mongoose:
----------------------------- 
1. Schema Validation, Error Handling, more control over the schema